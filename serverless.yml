service: src

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true
custom:
  REGION: ${env:REGION}
  nodejsVer: nodejs12.x
  memorySize: 256
  timeout: 900
  TZ: Asia/Tokyo
  SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
  #serverless-layers:
  #  dependenciesPath: ./package.json
  #  layersDeploymentBucket: myNodeModulePackages897817345
  #esbuild:
  #  bundle: true
  #  minify: false

provider:
  name: aws
  region: ${self:custom.REGION}
  runtime: ${self:custom.nodejsVer}
  memorySize: ${self:custom.memorySize}
  timeout: ${self:custom.timeout}
  #deploymentBucket:
  #  #name:  ${self:custom.serverless-layers.layersDeploymentBucket}
  #  name: myNodeModulePackages897817345
  lambdaHashingVersion: 20201221

#package:
#  patterns:
#    - '!LICENSE'
#    - '!README.md'

layers:
  layerName:
    path: lambdaLayer
    description: nodejs package layers
#    CompatibleRuntimes:
#      - ${self:custom.nodejsVer}


plugins:
  - serverless-dotenv-plugin
  - serverless-offline
#  - serverless-layers

functions:
  slack-notify:
    handler: src/slack-notify.handler
    name: slack-notify
    events:
      - sns:
          arn: !Ref snsTopic
          topicName: snsTopic
    environment:
      TZ: ${self:custom.TZ}
      SLACK_WEBHOOK_URL: ${self:custom.SLACK_WEBHOOK_URL}
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: LayerNameLambdaLayer }


resources:
  Resources:
    snsTopic:
      Type: AWS::SNS::Topic
  Outputs:
    snsTopicArn:
      Description: "ARN of SNS Topic"
      Value: !Ref snsTopic
